import { __decorate } from "tslib";
import { ChangeDetectorRef, Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { IconPickerService } from './icon-picker.service';
import { IconType } from './icon';
let IconPickerComponent = class IconPickerComponent {
    constructor(el, cdr, service) {
        this.el = el;
        this.cdr = cdr;
        this.service = service;
        this.iconType = IconType;
        this.dialogArrowSize = 10;
        this.icons = [];
        this.search = '';
    }
    setDialog(instance, elementRef, icon, ipPosition, ipHeight, ipMaxHeight, ipWidth, ipPlaceHolder, ipFallbackIcon, ipIconPack, ipIconSize, ipIconVerticalPadding, ipIconHorizontalPadding, ipButtonStyleClass, ipDivSearchStyleClass, ipInputSearchStyleClass, ipKeepSearchFilter) {
        this.directiveInstance = instance;
        this.setInitialIcon(icon);
        this.directiveElementRef = elementRef;
        this.ipPosition = ipPosition;
        this.ipHeight = parseInt(ipHeight, 10);
        this.ipMaxHeight = parseInt(ipMaxHeight, 10);
        this.ipWidth = parseInt(ipWidth, 10);
        if (!this.ipWidth) {
            this.ipWidth = elementRef.nativeElement.offsetWidth;
        }
        this.ipIconSize = parseInt(ipIconSize, 10);
        this.ipIconVerticalPadding = parseInt(ipIconVerticalPadding, 10);
        this.ipIconHorizontalPadding = parseInt(ipIconHorizontalPadding, 10);
        this.ipKeepSearchFilter = JSON.parse(ipKeepSearchFilter);
        this.ipPlaceHolder = ipPlaceHolder;
        this.ipFallbackIcon = ipFallbackIcon;
        this.ipIconPack = ipIconPack;
        this.ipButtonStyleClass = ipButtonStyleClass;
        this.ipInputSearchStyleClass = ipInputSearchStyleClass;
        this.ipDivSearchStyleClass = ipDivSearchStyleClass;
        this.buttonHeight = this.ipIconSize + 2 * this.ipIconVerticalPadding;
        this.buttonWidth = this.ipIconSize + 2 * this.ipIconHorizontalPadding;
    }
    ngOnInit() {
        this.icons = this.service.getIcons(this.ipIconPack);
        this.listenerMouseDown = (event) => this.onMouseDown(event);
        this.listenerResize = () => this.onResize();
        this.openDialog(this.initialIcon);
    }
    setInitialIcon(icon) {
        this.initialIcon = icon;
        this.selectedIcon = this.icons.find(el => el ?
            `fa fa-${el.id}` === icon || `glyphicon glyphicon-${el.id}` === icon || `${el.id}` === icon :
            false);
        if (this.ipKeepSearchFilter && this.selectedIcon && icon !== this.ipFallbackIcon) {
            this.search = this.selectedIcon.id;
        }
        else {
            this.search = '';
        }
    }
    openDialog(icon) {
        this.setInitialIcon(icon);
        this.openIconPicker();
    }
    setSearch(val) {
        this.search = val;
    }
    selectIcon(icon) {
        if (icon.type === IconType.FONT_AWESEOME) {
            this.directiveInstance.iconSelected(`fa fa-${icon.id}`);
        }
        else if (icon.type === IconType.BOOTSTRAP) {
            this.directiveInstance.iconSelected(`glyphicon glyphicon-${icon.id}`);
        }
        else if (icon.type === IconType.FONT_AWESEOME5) {
            this.directiveInstance.iconSelected(`${icon.id}`);
        }
        else if (icon.type === IconType.MATERIAL) {
            this.directiveInstance.iconSelected(`${icon.id}`);
        }
        this.closeIconPicker();
    }
    onMouseDown(event) {
        if (!this.isDescendant(this.el.nativeElement, event.target) && event.target !== this.directiveElementRef.nativeElement) {
            this.closeIconPicker();
        }
    }
    openIconPicker() {
        if (!this.show) {
            this.show = true;
            this.hidden = true;
            setTimeout(() => {
                this.setDialogPosition();
                this.hidden = false;
                this.cdr.detectChanges();
            }, 0);
            document.addEventListener('mousedown', this.listenerMouseDown);
            window.addEventListener('resize', this.listenerResize);
        }
    }
    closeIconPicker() {
        if (this.show) {
            this.show = false;
            document.removeEventListener('mousedown', this.listenerMouseDown);
            window.removeEventListener('resize', this.listenerResize);
            this.cdr.detectChanges();
        }
    }
    onResize() {
        if (this.position === 'fixed') {
            this.setDialogPosition();
        }
    }
    setDialogPosition() {
        const dialogHeight = this.dialogElement.nativeElement.offsetHeight;
        let node = this.directiveElementRef.nativeElement;
        let position = 'static';
        let transform = '';
        let parentNode = null;
        let transformNode = null;
        let style = null;
        while (node !== null && node.tagName !== 'HTML') {
            style = window.getComputedStyle(node);
            position = style.getPropertyValue('position');
            transform = style.getPropertyValue('transform');
            if (position !== 'static' && parentNode === null) {
                parentNode = node;
            }
            if (transform && transform !== 'none' && transformNode === null) {
                transformNode = node;
            }
            if (position === 'fixed') {
                parentNode = transformNode;
                break;
            }
            node = node.parentNode;
        }
        const boxDirective = this.createBox(this.directiveElementRef.nativeElement, (position !== 'fixed'));
        if (position !== 'fixed' || parentNode) {
            if (parentNode === null) {
                parentNode = node;
            }
            const boxParent = this.createBox(parentNode, true);
            this.top = boxDirective.top - boxParent.top;
            this.left = boxDirective.left - boxParent.left;
        }
        else {
            this.top = boxDirective.top;
            this.left = boxDirective.left;
        }
        if (position === 'fixed') {
            this.position = 'fixed';
        }
        if (this.ipPosition === 'left') {
            this.left -= this.ipWidth + this.dialogArrowSize - 2;
        }
        else if (this.ipPosition === 'top') {
            this.top -= dialogHeight + this.dialogArrowSize;
            this.arrowTop = dialogHeight - 1;
        }
        else if (this.ipPosition === 'bottom') {
            this.top += boxDirective.height + this.dialogArrowSize;
        }
        else {
            this.left += boxDirective.width + this.dialogArrowSize - 2;
        }
    }
    isDescendant(parent, child) {
        let node = child.parentNode;
        while (node !== null) {
            if (node === parent) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    }
    createBox(element, offset) {
        return {
            top: element.getBoundingClientRect().top + (offset ? window.pageYOffset : 0),
            left: element.getBoundingClientRect().left + (offset ? window.pageXOffset : 0),
            width: element.offsetWidth,
            height: element.offsetHeight
        };
    }
};
IconPickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: IconPickerService }
];
__decorate([
    ViewChild('dialogPopup')
], IconPickerComponent.prototype, "dialogElement", void 0);
IconPickerComponent = __decorate([
    Component({
        // tslint:disable-next-line: component-selector
        selector: 'icon-picker',
        template: "<div class=\"icon-picker\" #dialogPopup\r\n     [hidden]=\"!show\"\r\n     [style.visibility]=\"this.hidden ? 'hidden' : 'visible'\"\r\n     [style.height.px]=\"ipHeight\"\r\n     [style.width.px]=\"ipWidth\"\r\n     [style.top.px]=\"top\"\r\n     [style.left.px]=\"left\"\r\n     [style.position]=\"position\">\r\n\r\n  <div class=\"arrow arrow-{{ipPosition}}\" [style.top.px]=\"arrowTop\"></div>\r\n\r\n  <div class=\"icon-search {{ipDivSearchStyleClass}}\">\r\n    <input type=\"text\" class=\"{{ipInputSearchStyleClass}}\" [text] [value]=\"search\" (newValue)=\"setSearch($event)\"\r\n           [placeholder]=\"ipPlaceHolder\">\r\n  </div>\r\n  <div class=\"icon-grid\" [ngStyle]=\"{'max-height.px': ipMaxHeight}\">\r\n    <div *ngFor=\"let icon of icons | searchIcon:search\">\r\n      <button *ngIf=\"icon\" class=\"ip-button-icon {{ipButtonStyleClass}}\" type=\"button\" title=\"{{ icon.name }}\"\r\n              [ngClass]=\"{active : icon === selectedIcon}\"\r\n              [style.width.px]=\"buttonWidth\"\r\n              [style.height.px]=\"buttonHeight\"\r\n              [style.padding-top.px]=\"ipIconVerticalPadding\"\r\n              [style.padding-bottom.px]=\"ipIconVerticalPadding\"\r\n              [style.padding-left.px]=\"ipIconHorizontalPadding\"\r\n              [style.padding-right.px]=\"ipIconHorizontalPadding\"\r\n              (click)=\"selectIcon(icon)\">\r\n        <span *ngIf=\"icon.type === iconType.FONT_AWESEOME\" class=\"fa fa-{{icon.id}}\"\r\n              [style.font-size.px]=\"ipIconSize\"></span>\r\n        <span *ngIf=\"icon.type === iconType.BOOTSTRAP\" class=\"glyphicon glyphicon-{{icon.id}}\"\r\n              [style.font-size.px]=\"ipIconSize\"></span>\r\n        <span *ngIf=\"icon.type === iconType.FONT_AWESEOME5\" class=\"{{icon.id}}\"\r\n              [style.font-size.px]=\"ipIconSize\"></span>\r\n        <span *ngIf=\"icon.type === iconType.MATERIAL\" class=\"material-icons\"\r\n              [style.font-size.px]=\"ipIconSize\">{{icon.id}}</span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n",
        styles: [".icon-picker{box-sizing:border-box;margin:0;position:absolute;z-index:100000;top:250px;left:30px;width:230px;height:auto;border:1px solid #777;cursor:default;background-color:#fff;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.icon-picker i{position:relative;cursor:default}.icon-picker .arrow{position:absolute;z-index:999999;width:0;height:0;border-style:solid}.icon-picker .arrow-right{top:10px;left:-20px;border-width:5px 10px;border-color:transparent #777 transparent transparent}.icon-picker .arrow-left{top:10px;left:100%;border-width:5px 10px;border-color:transparent transparent transparent #777}.icon-picker .arrow-bottom{top:-20px;left:10px;border-width:10px 5px;border-color:transparent transparent #777}.icon-picker .arrow-top{left:10px;border-width:10px 5px;border-color:#777 transparent transparent}.icon-picker div.icon-search{padding:5px}.icon-picker div.icon-grid{display:-webkit-box;display:flex;overflow-y:auto;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;flex-wrap:wrap;padding:5px}.icon-picker div.icon-grid div{margin:2px}.icon-picker div.cursor-sv{position:relative;width:15px;height:15px;border-radius:50%;border:1px solid #ddd;cursor:default}.icon-picker div.cursor{position:relative;width:16px;height:16px;border-radius:50%;border:2px solid #222;cursor:default}"]
    })
], IconPickerComponent);
export { IconPickerComponent };
//# sourceMappingURL=data:application/json;base64,