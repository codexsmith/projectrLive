import { __decorate } from "tslib";
import { ComponentFactoryResolver, Directive, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, ReflectiveInjector, ViewContainerRef } from '@angular/core';
import { IconPickerComponent } from './icon-picker.component';
var IconPickerDirective = /** @class */ (function () {
    function IconPickerDirective(vcRef, el, cfr) {
        this.vcRef = vcRef;
        this.el = el;
        this.cfr = cfr;
        this.ipPlaceHolder = 'Search icon...';
        this.ipPosition = 'right';
        this.ipFallbackIcon = 'fas fa-user';
        this.ipHeight = 'auto';
        this.ipMaxHeight = '200px';
        this.ipWidth = '230px';
        this.ipIconSize = '16px';
        this.ipIconVerticalPadding = '6px'; // Top / Bottom
        this.ipIconHorizontalPadding = '10px'; // Left / Right
        this.ipIconPack = ['bs', 'fa5'];
        this.ipKeepSearchFilter = 'false';
        // Default design with bootstrap
        this.ipButtonStyleClass = 'btn btn-default';
        this.ipDivSearchStyleClass = '';
        this.ipInputSearchStyleClass = 'form-control input-sm';
        this.iconPickerSelect = new EventEmitter(true);
        this.ignoreChanges = false;
        this.created = false;
    }
    IconPickerDirective.prototype.ngOnChanges = function (changes) {
        if (changes.iconPicker) {
            this.ignoreChanges = false;
        }
    };
    IconPickerDirective.prototype.ngOnInit = function () {
        this.iconPicker = this.iconPicker || this.ipFallbackIcon || 'fa fa-user-plus';
        this.iconPickerSelect.emit(this.iconPicker);
    };
    IconPickerDirective.prototype.onClick = function () {
        this.openDialog();
    };
    IconPickerDirective.prototype.openDialog = function () {
        if (!this.created) {
            this.created = true;
            var vcRef = this.vcRef;
            var compFactory = this.cfr.resolveComponentFactory(IconPickerComponent);
            // tslint:disable-next-line: deprecation
            var injector = ReflectiveInjector.fromResolvedProviders([], vcRef.parentInjector);
            var cmpRef = vcRef.createComponent(compFactory, 0, injector, []);
            cmpRef.instance.setDialog(this, this.el, this.iconPicker, this.ipPosition, this.ipHeight, this.ipMaxHeight, this.ipWidth, this.ipPlaceHolder, this.ipFallbackIcon, this.ipIconPack, this.ipIconSize, this.ipIconVerticalPadding, this.ipIconHorizontalPadding, this.ipButtonStyleClass, this.ipDivSearchStyleClass, this.ipInputSearchStyleClass, this.ipKeepSearchFilter);
            this.dialog = cmpRef.instance;
            if (this.vcRef !== vcRef) {
                cmpRef.changeDetectorRef.detectChanges();
            }
        }
        else if (this.dialog) {
            this.dialog.openDialog(this.iconPicker);
        }
    };
    IconPickerDirective.prototype.iconSelected = function (icon) {
        this.iconPickerSelect.emit(icon);
    };
    IconPickerDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: ComponentFactoryResolver }
    ]; };
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "iconPicker", void 0);
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "ipPlaceHolder", void 0);
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "ipPosition", void 0);
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "ipFallbackIcon", void 0);
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "ipHeight", void 0);
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "ipMaxHeight", void 0);
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "ipWidth", void 0);
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "ipIconSize", void 0);
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "ipIconVerticalPadding", void 0);
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "ipIconHorizontalPadding", void 0);
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "ipIconPack", void 0);
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "ipKeepSearchFilter", void 0);
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "ipButtonStyleClass", void 0);
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "ipDivSearchStyleClass", void 0);
    __decorate([
        Input()
    ], IconPickerDirective.prototype, "ipInputSearchStyleClass", void 0);
    __decorate([
        Output()
    ], IconPickerDirective.prototype, "iconPickerSelect", void 0);
    IconPickerDirective = __decorate([
        Directive({
            // tslint:disable-next-line: directive-selector
            selector: '[iconPicker]',
            // tslint:disable-next-line: no-host-metadata-property
            host: {
                '(click)': 'onClick()'
            }
        })
    ], IconPickerDirective);
    return IconPickerDirective;
}());
export { IconPickerDirective };
//# sourceMappingURL=data:application/json;base64,