import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { IconType } from './icon';
import { BootstrapIconsPack } from './pack/bootstrap-icons-pack';
import { FontAwesome4IconsPack } from './pack/font-awesome4-icons-pack';
import { FontAwesome5IconsPack } from './pack/font-awesome5-icons-pack';
import { MaterialIconsPack } from './pack/material-icons-pack';
var IconPickerService = /** @class */ (function () {
    function IconPickerService() {
        this.bsIconPack = new BootstrapIconsPack();
        this.fa4IconsPack = new FontAwesome4IconsPack();
        this.fa5IconsPack = new FontAwesome5IconsPack();
        this.matIconsPack = new MaterialIconsPack();
    }
    IconPickerService.prototype.getIcons = function (ipIconPacks) {
        var _this = this;
        var icons = [];
        ipIconPacks.forEach(function (ipIconPack) {
            if (ipIconPack === 'fa' || ipIconPack === 'all') {
                var faIcons = _this.fa4IconsPack.getIcons().map(function (icon) {
                    icon.type = IconType.FONT_AWESEOME;
                    return icon;
                });
                icons = icons.concat(faIcons);
            }
            if (ipIconPack === 'bs' || ipIconPack === 'all') {
                var bsIcons = _this.bsIconPack.getIcons().map(function (icon) {
                    icon.type = IconType.BOOTSTRAP;
                    return icon;
                });
                icons = icons.concat(bsIcons);
            }
            if (ipIconPack === 'fa5' || ipIconPack === 'all') {
                var fa5Icons = _this.fa5IconsPack.getIcons().map(function (icon) {
                    icon.type = IconType.FONT_AWESEOME5;
                    return icon;
                });
                icons = icons.concat(fa5Icons);
            }
            if (ipIconPack === 'mat' || ipIconPack === 'all') {
                var matIcons = _this.matIconsPack.getIcons().map(function (icon) {
                    icon.type = IconType.MATERIAL;
                    return icon;
                });
                icons = icons.concat(matIcons);
            }
        });
        return icons;
    };
    IconPickerService = __decorate([
        Injectable()
    ], IconPickerService);
    return IconPickerService;
}());
export { IconPickerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1waWNrZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pY29uLXBpY2tlci8iLCJzb3VyY2VzIjpbImxpYi9pY29uLXBpY2tlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBTyxRQUFRLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFFdEMsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDL0QsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDdEUsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDdEUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFHN0Q7SUFNRTtRQUNFLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO1FBQzNDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFFRCxvQ0FBUSxHQUFSLFVBQVMsV0FBcUI7UUFBOUIsaUJBaUNDO1FBaENDLElBQUksS0FBSyxHQUFXLEVBQUUsQ0FBQztRQUN2QixXQUFXLENBQUMsT0FBTyxDQUFDLFVBQUMsVUFBVTtZQUM3QixJQUFJLFVBQVUsS0FBSyxJQUFJLElBQUksVUFBVSxLQUFLLEtBQUssRUFBRTtnQkFDL0MsSUFBTSxPQUFPLEdBQUcsS0FBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJO29CQUNuRCxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUM7b0JBQ25DLE9BQU8sSUFBSSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO2dCQUNILEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQy9CO1lBQ0QsSUFBSSxVQUFVLEtBQUssSUFBSSxJQUFJLFVBQVUsS0FBSyxLQUFLLEVBQUU7Z0JBQy9DLElBQU0sT0FBTyxHQUFHLEtBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSTtvQkFDakQsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDO29CQUMvQixPQUFPLElBQUksQ0FBQztnQkFDZCxDQUFDLENBQUMsQ0FBQztnQkFDSCxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUMvQjtZQUNELElBQUksVUFBVSxLQUFLLEtBQUssSUFBSSxVQUFVLEtBQUssS0FBSyxFQUFFO2dCQUNoRCxJQUFNLFFBQVEsR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFBLElBQUk7b0JBQ3BELElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQztvQkFDcEMsT0FBTyxJQUFJLENBQUM7Z0JBQ2QsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDaEM7WUFDRCxJQUFJLFVBQVUsS0FBSyxLQUFLLElBQUksVUFBVSxLQUFLLEtBQUssRUFBRTtnQkFDaEQsSUFBTSxRQUFRLEdBQUcsS0FBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJO29CQUNwRCxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7b0JBQzlCLE9BQU8sSUFBSSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO2dCQUNILEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ2hDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUE5Q1UsaUJBQWlCO1FBRDdCLFVBQVUsRUFBRTtPQUNBLGlCQUFpQixDQStDN0I7SUFBRCx3QkFBQztDQUFBLEFBL0NELElBK0NDO1NBL0NZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7SWNvbiwgSWNvblR5cGV9IGZyb20gJy4vaWNvbic7XHJcbmltcG9ydCB7SWNvbnNQYWNrfSBmcm9tICcuL2ljb25zLXBhY2snO1xyXG5pbXBvcnQge0Jvb3RzdHJhcEljb25zUGFja30gZnJvbSAnLi9wYWNrL2Jvb3RzdHJhcC1pY29ucy1wYWNrJztcclxuaW1wb3J0IHtGb250QXdlc29tZTRJY29uc1BhY2t9IGZyb20gJy4vcGFjay9mb250LWF3ZXNvbWU0LWljb25zLXBhY2snO1xyXG5pbXBvcnQge0ZvbnRBd2Vzb21lNUljb25zUGFja30gZnJvbSAnLi9wYWNrL2ZvbnQtYXdlc29tZTUtaWNvbnMtcGFjayc7XHJcbmltcG9ydCB7TWF0ZXJpYWxJY29uc1BhY2t9IGZyb20gJy4vcGFjay9tYXRlcmlhbC1pY29ucy1wYWNrJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEljb25QaWNrZXJTZXJ2aWNlIHtcclxuICBwcml2YXRlIGJzSWNvblBhY2s6IEljb25zUGFjaztcclxuICBwcml2YXRlIGZhNEljb25zUGFjazogSWNvbnNQYWNrO1xyXG4gIHByaXZhdGUgZmE1SWNvbnNQYWNrOiBJY29uc1BhY2s7XHJcbiAgcHJpdmF0ZSBtYXRJY29uc1BhY2s6IEljb25zUGFjaztcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmJzSWNvblBhY2sgPSBuZXcgQm9vdHN0cmFwSWNvbnNQYWNrKCk7XHJcbiAgICB0aGlzLmZhNEljb25zUGFjayA9IG5ldyBGb250QXdlc29tZTRJY29uc1BhY2soKTtcclxuICAgIHRoaXMuZmE1SWNvbnNQYWNrID0gbmV3IEZvbnRBd2Vzb21lNUljb25zUGFjaygpO1xyXG4gICAgdGhpcy5tYXRJY29uc1BhY2sgPSBuZXcgTWF0ZXJpYWxJY29uc1BhY2soKTtcclxuICB9XHJcblxyXG4gIGdldEljb25zKGlwSWNvblBhY2tzOiBzdHJpbmdbXSk6IEljb25bXSB7XHJcbiAgICBsZXQgaWNvbnM6IEljb25bXSA9IFtdO1xyXG4gICAgaXBJY29uUGFja3MuZm9yRWFjaCgoaXBJY29uUGFjaykgPT4ge1xyXG4gICAgICBpZiAoaXBJY29uUGFjayA9PT0gJ2ZhJyB8fCBpcEljb25QYWNrID09PSAnYWxsJykge1xyXG4gICAgICAgIGNvbnN0IGZhSWNvbnMgPSB0aGlzLmZhNEljb25zUGFjay5nZXRJY29ucygpLm1hcChpY29uID0+IHtcclxuICAgICAgICAgIGljb24udHlwZSA9IEljb25UeXBlLkZPTlRfQVdFU0VPTUU7XHJcbiAgICAgICAgICByZXR1cm4gaWNvbjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpY29ucyA9IGljb25zLmNvbmNhdChmYUljb25zKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaXBJY29uUGFjayA9PT0gJ2JzJyB8fCBpcEljb25QYWNrID09PSAnYWxsJykge1xyXG4gICAgICAgIGNvbnN0IGJzSWNvbnMgPSB0aGlzLmJzSWNvblBhY2suZ2V0SWNvbnMoKS5tYXAoaWNvbiA9PiB7XHJcbiAgICAgICAgICBpY29uLnR5cGUgPSBJY29uVHlwZS5CT09UU1RSQVA7XHJcbiAgICAgICAgICByZXR1cm4gaWNvbjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpY29ucyA9IGljb25zLmNvbmNhdChic0ljb25zKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaXBJY29uUGFjayA9PT0gJ2ZhNScgfHwgaXBJY29uUGFjayA9PT0gJ2FsbCcpIHtcclxuICAgICAgICBjb25zdCBmYTVJY29ucyA9IHRoaXMuZmE1SWNvbnNQYWNrLmdldEljb25zKCkubWFwKGljb24gPT4ge1xyXG4gICAgICAgICAgaWNvbi50eXBlID0gSWNvblR5cGUuRk9OVF9BV0VTRU9NRTU7XHJcbiAgICAgICAgICByZXR1cm4gaWNvbjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpY29ucyA9IGljb25zLmNvbmNhdChmYTVJY29ucyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGlwSWNvblBhY2sgPT09ICdtYXQnIHx8IGlwSWNvblBhY2sgPT09ICdhbGwnKSB7XHJcbiAgICAgICAgY29uc3QgbWF0SWNvbnMgPSB0aGlzLm1hdEljb25zUGFjay5nZXRJY29ucygpLm1hcChpY29uID0+IHtcclxuICAgICAgICAgIGljb24udHlwZSA9IEljb25UeXBlLk1BVEVSSUFMO1xyXG4gICAgICAgICAgcmV0dXJuIGljb247XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWNvbnMgPSBpY29ucy5jb25jYXQobWF0SWNvbnMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBpY29ucztcclxuICB9XHJcbn1cclxuIl19